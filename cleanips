#!/usr/bin/env bash
#Copyright (C) 2015  Helal Uddin <helal00 at gmail.com>
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

_srcsbinpath=$(dirname $(readlink -f $0))

declare -a _requiredfiles
declare -a _requiredexefiles

_requiredfiles[${#_requiredfiles[@]}]="functions"

if [ ! -z "$_srcsbinpath" ] ; then
	if [ -s "$_srcsbinpath/resolve" ] ; then
		. $_srcsbinpath/resolve	
	else
		echo "$_srcsbinpath/resolve file not found!" 1>&2
		exit 1
	fi
fi

if [ ! -d "$_srcsbinpath/.store" ] ; then
	echo "The prgram is not yet ready to run. Please run $_srcsbinpath/installme first." 1>&2
	exit 1
fi
_noask=""
if [ "$1" = "noask" ] ; then
	_noask="noask"
	shift
fi

_cleanipwithban="$1"
shift
_ipnotactivetime="$1"
shift
_maxtopermanent="$1"
shift
_dbfile="$1"
shift
_manualblocklist="$1"
shift
_permanentbannedlist="$1"
if [ -z "$_manualblocklist" ] ; then
	_manualblocklist="$_srcsbinpath/manualblocked.list"
fi
if [ -z "$_permanentbannedlist" ] ; then
	_permanentbannedlist="$_srcsbinpath/permanent.list"
fi


if [ -z "$_dbfile" ] || [ ! -f "$_dbfile" ] ; then
	if [ -z  "$_noask" ] ; then
		if [ -f "$_srcsbinpath/.store/balcklist.db" ] && confirmtogo "We found a db file at $_srcsbinpath/.store/balcklist.db, do you want to use this db? (yes/press enter only to cancel): " ; then
			_dbfile="$_srcsbinpath/.store/balcklist.db"
		fi
		if [ -z "$_dbfile" ] ; then
			read -p "Please enter the db file location : " _dbfile
			if [ -z "$_dbfile" ] || [ ! -f "$_dbfile" ] ; then
				echo "ERROR: Your input: $_dbfile is not a valid file, file doesn't exist." 1>&2
				exit 1
			fi
		fi
	else
		echo "No valid dbfile path given." 1>&2
		exit 1
	fi
fi

if [ -z "$_cleanipwithban" ] || ! isposint "$_cleanipwithban" ; then
	if [ -z  "$_noask" ] ; then
		read -p "You want to clean up ips with atleast how many bans? 0 means all ips regardless of ban count.Type a number >=0 : " _cleanipwithban
		if [ -z "$_cleanipwithban" ] || ! isposint "$_cleanipwithban" ; then
			echo "ERROR: Your input: $_cleanipwithban is not a number greater than or equal to 0" 1>&2
			exit
		fi
	else
		echo "No valid bans number given." 1>&2
		exit 1
	fi
fi


if [ -z "$_ipnotactivetime" ] || ! isposint "$_ipnotactivetime" || [ "$_ipnotactivetime" -lt 1 ] ; then
	if [ -z  "$_noask" ] ; then
		read -p "You want to cleanup ip inactive for how many months? Type a number >0 : " _ipnotactivetime
		if [ -z "$_ipnotactivetime" ] || ! isposint "$_ipnotactivetime" || [ "$_ipnotactivetime" -lt 1 ] ; then
			echo "ERROR: Your input: $_ipnotactivetime is not a number greater than 0" 1>&2
			exit 1
		fi
	else
		echo "No valid bans inactive times given." 1>&2
		exit 1
	fi
fi

function ufwunban(){
local _iptodel _ln
_iptodel=$1
for _ln in $(ufw status numbered | (grep "$_iptodel" | awk -F"[][]" '{print $2}'))
do
ufw --force delete $_ln
done
}

function ufwban(){
local _iptoadd _savetofile
_iptoadd=$1
_savetofile=$2

if [ ! -z "$_savetofile" ] ; then
	echo "$_iptoadd" >> "$_savetofile"
fi

if ! ufw status numbered | grep -qE "DENY.*$_iptoadd" ; then
ufwb insert 1 deny from $_iptoadd to any
fi
}

#echo "_dbfile=$_dbfile"
#echo "_cleanipwithban=$_cleanipwithban" 
#echo "_ipnotactivetime=$_ipnotactivetime"
#echo "_maxtopermanent=$_maxtopermanent"
#echo "_manualblocklist=$_manualblocklist"

_ipnotactivetime=$(echo "$_ipnotactivetime*24*60*60" | bc)
_temploc="/tmp/ufw-cleanips"
_tempcleandb="clean.db"
mkdir -p "$_temploc"
_storedir=$(dirname $_dbfile)
singletonefile "${_dbfile}.lock" 20 3
echo "$$" > "${_dbfile}.lock"
cp -f "$_dbfile" "${_dbfile}.bak"
rm -f "${_dbfile}.lock"

while read _ipline           
do   
if [ ! -z "$_ipline" ] ; then
	_disabled=""
	if [ "${_ipline:0:1}" = "#" ] ; then
		_disabled="#"
		_ipline="${_ipline:1}"
	fi
	
	strtoarry "$_ipline" "_cparts" '|' 
	if [ ${#_cparts[@]} -gt 0 ] && isvalidip4 "${_cparts[0]}"  ; then
		if [ -z "${_cparts[1]}" ] || ! isposint "${_cparts[1]}" ; then
			_cparts[1]=1
		fi
		if [ "${_cparts[1]}" -eq 0 ] ; then
			_cparts[1]=1
		fi
		
		if [ ! -z "$_disabled" ] ; then
			if [ -z "${_cparts[2]}" ] ; then
				echo "$_disabled${_cparts[0]}|${_cparts[1]}|$(date)" >> "$_temploc/$_tempcleandb"
			else
				echo "$_disabled${_cparts[0]}|${_cparts[1]}|${_cparts[2]}" >> "$_temploc/$_tempcleandb"
			fi
			ufwunban "${_cparts[0]}"
			findanddelline "$_permanentbannedlist" "${_cparts[0]}" 0
			continue
		fi
		 
		if [ "$_cleanipwithban" -eq 0 ] || [ "${_cparts[1]}" -le "$_cleanipwithban" ] ; then
			if _tinuts=$(date -d "${_cparts[2]}" +%s) && [ $(echo "$(date +%s) - $_tinuts" | bc) -ge "$_ipnotactivetime" ] ; then
				ufwunban "${_cparts[0]}"
				findanddelline "$_permanentbannedlist" "${_cparts[0]}" 0
				if [ -z "${_cparts[2]}" ] ; then
					echo "#${_cparts[0]}|${_cparts[1]}|$(date)" >> "$_temploc/$_tempcleandb"
				else
					echo "#${_cparts[0]}|${_cparts[1]}|${_cparts[2]}" >> "$_temploc/$_tempcleandb"
				fi
			else
				if [ -z "${_cparts[2]}" ] ; then
					echo "${_cparts[0]}|${_cparts[1]}|$(date)" >> "$_temploc/$_tempcleandb"
				else
					echo "${_cparts[0]}|${_cparts[1]}|${_cparts[2]}" >> "$_temploc/$_tempcleandb"
				fi
			fi
			continue
		else
			if [ -z "${_cparts[2]}" ] ; then
				echo "${_cparts[0]}|${_cparts[1]}|$(date)" >> "$_temploc/$_tempcleandb"
			else
				echo "${_cparts[0]}|${_cparts[1]}|${_cparts[2]}" >> "$_temploc/$_tempcleandb"
			fi
		fi
	fi
fi      
done < "${_dbfile}.bak"

_tab=$(printf '\t')
ufw status | grep "DENY" | awk '{print $NF}' > "$_temploc/currbanned"
_alljails=$(fail2ban-client status | grep ' Jail list:' | awk -F: '{print $NF}')
_alljails=$(trimStr "$_tab" "$_alljails")
strtoarry "$_alljails" "_uparts" ', '
for _jail in "${_uparts[@]}"
do
_ipline=$(fail2ban-client status $_jail | grep ' Banned IP list:' | awk -F: '{print $NF}')
_ipline=$(trimStr "$_tab" "$_ipline")
if [ ! -z $_ipline ] ; then
	strtoarry "$_ipline" "_iplist" ', '
	for _tip in "${_iplist[@]}"
	do
		echo "$_tip" >> "$_temploc/tempbanned"
	done
fi
done

while read _ipl
do
	if [ ! -z "$_ipl" ] ; then

		_ipexist=1
		if grep -q "$_ipl" "$_temploc/tempbanned" ; then
			_ipexist=0
		elif [ -f "$_permanentbannedlist" ] && grep -q "$_ipl" "$_permanentbannedlist" ; then
			_ipexist=0
		elif [ -f "$_manualblocklist" ] && grep -q "$_ipl" "$_manualblocklist" ; then
			_ipexist=0
		fi
		if [ "$_ipexist" -eq 1 ] ; then
			ufwunban "$_ipl"
		fi
	fi
done < "$_temploc/currbanned"

echo "$(date)" > "$_storedir/cleanup.run"
singletonefile "${_dbfile}.lock" 20 2
echo "$$" > "${_dbfile}.lock"
mv -f "$_temploc/$_tempcleandb" "$_dbfile"
rm -f "${_dbfile}.lock"
rm -rf "$_temploc"
